generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(uuid())
  username             String
  name                 String
  email                String   @unique
  passwordHash         String   @map("password_hash")
  passwordRecoveryCode String?  @map("password_recovery_code")
  createdAt            DateTime @default(now()) @map("created_at")

  favoriteWriters    FavoriteWritersOfUser[]
  favoriteCategories FavoriteCategoriesBookOfUser[]
  favoriteBooks      FavoriteBooksOfUser[]

  readingSetting      ReadingSetting?
  Reading             Reading[]
  UserVisitBook       UserVisitBook[]
  Assessement         Assessement[]
  UserLikeAssessement UserLikeAssessement[]

  @@map("users")
}

model ReadingSetting {
  id               String  @id @default(uuid())
  fontFamily       String  @map("font_family")
  fontSize         Decimal @map("font_size")
  fontSpacing      String  @map("font_spacing")
  screenBrightness Decimal @map("screen_brightness")
  theme            String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("reading_settings")
}

model FavoriteWritersOfUser {
  writer   Writer @relation(fields: [writerId], references: [id])
  writerId String @map("writer_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@id([userId, writerId])
  @@map("favorites_writers_of_users")
}

model FavoriteCategoriesBookOfUser {
  BookCategory   BookCategory @relation(fields: [bookCategoryId], references: [id])
  bookCategoryId String       @map("book_category_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@id([userId, bookCategoryId])
  @@map("favorites_categories_book_of_users")
}

model FavoriteBooksOfUser {
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@id([userId, bookId])
  @@map("favorites_books_of_users")
}

model Book {
  id           String @id @default(uuid())
  title        String
  urlCover     String @map("url_cover")
  bookPath     String @map("book_path")
  synopsis     String
  publisher    String
  numberPage   Int?   @map("number_page")
  language     String
  ISBN         String
  score        Int    @default(0)
  visits       Int    @default(0)
  assessements Int    @default(0)
  read         Int    @default(0)
  favorite     Int    @default(0)

  writer   Writer @relation(fields: [writerId], references: [id])
  writerId String @map("writer_id")

  category         BookCategory          @relation(fields: [bookCategoryId], references: [id])
  bookCategoryId   String                @map("book_category_id")
  favoritedByUsers FavoriteBooksOfUser[]
  Reading          Reading[]
  UserVisitBook    UserVisitBook[]
  Assessement      Assessement[]

  @@map("books")
}

model BookCategory {
  id   String @id @default(uuid())
  name String

  books            Book[]
  favoritedByUsers FavoriteCategoriesBookOfUser[]

  @@map("book_categories")
}

model Writer {
  id   String @id @default(uuid())
  name String

  books            Book[]
  favoritedByUsers FavoriteWritersOfUser[]

  @@map("writers")
}

model Reading {
  id           String    @id @default(uuid())
  startTime    DateTime  @default(now()) @map("start_time")
  endTime      DateTime? @map("end_time")
  duration     Float     @default(0)
  lastPageRead Int       @default(0) @map("last_page_read")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  @@map("readings")
}

model UserVisitBook {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  @@map("user_visits_book")
}

model Assessement {
  id      String @id @default(uuid())
  score   Int
  comment String
  likes   Int    @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  UserLikesAssessements UserLikeAssessement[]

  @@map("assessement")
}

model UserLikeAssessement {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  assessement   Assessement @relation(fields: [assessementId], references: [id])
  assessementId String      @map("assessement_id")

  @@id([userId, assessementId])
  @@map("user_like_assessement")
}
